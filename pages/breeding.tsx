import type {NextPage} from 'next'
import Head from 'next/head'
import Image from 'next/image'

import Layout from "../components/Layout";
import React, {useEffect, useState} from "react";
import {tabType} from "../components/types/tabType";
import InventoryScreen from "../components/screens/Inventory";

import ItemCard from "../components/ItemCard";


import {toHttps} from "../components/utils/toHttps";
import {router} from "next/client";
import {useRouter} from "next/router";

const Breeding: NextPage = () => {

    const [selectedSlot, setSelectedSlot] = useState<'first' | 'second'>('first')

    const [choosenRarityInt, setChoosenRarityInt] = useState<0 | 1 | 2 | 3 | 4 | number>(0)

    const chooseRarityInt = (rarity: 0 | 1 | 2 | 3 | 4 | number) => {
        setChoosenRarityInt(rarity)
    }

    const getColors = (rarity: number) => {
        switch (rarity) {
            case 0:
                return {outlined: ' border-[#B8B8B8] ' + ' bg-[#E1E1E3] ', filled: ' bg-[#B8B8B8] '};
                break;
            case 1:
                return {outlined: ' border-[#B8B8B8] ' + ' bg-[#E1E1E3] ', filled: ' bg-[#B8B8B8] '};
                break;
            case 2:
                return {outlined: ' border-[#9BCA15] ' + ' bg-[#CFDEAC] ', filled: ' bg-[#9BCA15] '};
                break;
            case 3:
                return {outlined: ' border-[#67C5FA] ' + ' bg-[#CBE7F7] ', filled: ' bg-[#67C5FA] '};
                break;
            case 4:
                return {outlined: ' border-[#9600FF] ' + ' bg-[#C89BEE] ', filled: ' bg-[#9600FF] '};
                break;
            case 5:
                return {outlined: ' border-[#FF8F00] ' + ' bg-[#F1D0A9] ', filled: ' bg-[#FF8F00] '}
            default:
                return {outlined: ' border-[#B8B8B8] ' + ' bg-[#E1E1E3] ', filled: ' bg-[#B8B8B8] '}
        }
    }


    const [openBreedingPop, setOpenBreedingPop] = useState(false)

    const toggleBreedingPop = () => {
        setOpenBreedingPop(!openBreedingPop)
    }

    const translatorRarity = (rarity: number) => {
        if (rarity == 0) {
            return 1
        } else {
            return rarity
        }
    }

    const translateRarityInt = (rarity: number) => {
        switch (rarity) {
            case 1:
                return 'Common'
            case 2:
                return 'Uncommon'
            case 3:
                return 'Rare'
            case 4:
                return 'Epic'
            case 5:
                return 'Legendary'
        }
    }

    const translateRarityChance = (rarity: number) => {
        switch (rarity) {
            case 1:
                return 35
            case 2:
                return 15
            case 3:
                return 7
            case 4:
                return 1
            default:
                return 0
        }
    }

    const [showPrize, setShowPrize] = useState(false)
    const toggleShowPrize = () => {
        setShowPrize(!showPrize)
    }

    const [isBreeding, setIsBreeding] = useState(true);
    const breed = () => {
        setIsBreeding(true);
        setTimeout(() => {
            setIsBreeding(false)
        }, 4000)
    }

    const [breedingTitle, setBreedingTitle] = useState<string>('.')
    const iterateBreedingTitle = () => {
        if (breedingTitle.length < 3) {
            setTimeout(() => {
                setBreedingTitle(breedingTitle + '.')
            }, 500)
        } else {
            setTimeout(() => {
                setBreedingTitle('.')
            }, 500)
        }
    }
    useEffect(() => {
        iterateBreedingTitle()
    }, [breedingTitle])

    const [combineTitle, setCombineTitle] = useState('Combine')

    const router = useRouter()


    const [isFailureBreed, setIsFailureBreed] = useState(false);


    const getCost = (rarity: 0 | 1 | 2 | 3 | 4 | number) => {
        switch (rarity) {
            case 0:
                return 200
            case 1:
                return 200
            case 2:
                return 400
            case 3:
                return 800
            case 4:
                return 1200
            default:
                return 200
        }
    }

    return (
        <div className={'grey-gradient'}>
            <Head>
                <title>Create Next App</title>

                <meta name="description" content="Generated by create next app"/>
                <meta name="viewport" content="width=device-width, initial-scale=1"/>
                <link rel="icon" href="/favicon.ico"/>
            </Head>

            <main className={'font-roboto overscroll-y-none'}>
                {/*<Bunny></Bunny>*/}
                <Layout>
                    <div className={'w-full h-full p-4 flex justify-center items-center'}>
                        <div className={'w-full'}>
                            <div className={'grid grid-cols-5 w-full '}>
                                <div onClick={() => {
                                    setSelectedSlot('first');
                                    toggleBreedingPop()
                                }}
                                     className={'w-full min-h-[18rem] col-span-2 flex justify-center border-2 items-center rounded-xl' + getColors(choosenRarityInt).outlined}>
                                    <div className={'w-16 h-16 p-5 rounded-full' + getColors(choosenRarityInt).filled}>
                                        <div className={'w-full h-full relative'}>
                                            <Image alt={'empty'} src={'/images/breeding_module/emptyItem.svg'}
                                                   layout={'fill'}></Image>
                                        </div>
                                    </div>
                                </div>
                                <div>

                                </div>
                                <div onClick={() => {
                                    setSelectedSlot('second');
                                    toggleBreedingPop()
                                }}
                                     className={'w-full min-h-[18rem] col-span-2 flex justify-center border-2 items-center rounded-xl' + getColors(choosenRarityInt).outlined}>
                                    <div className={'w-16 h-16 p-5 rounded-full' + getColors(choosenRarityInt).filled}>
                                        <div className={'w-full h-full relative'}>
                                            <Image alt={'empty'} src={'/images/breeding_module/emptyItem.svg'}
                                                   layout={'fill'}></Image>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div className={'col-start-2 col-span-3 relative'}>
                                <img src={'/images/breeding_module/breeding_path.svg'} className={'w-full'}></img>
                            </div>
                            <div className={'col-start-2 col-span-3'}>
                                <div
                                    className={'w-full h-full border-2 rounded-2xl flex justify-center items-center p-2' + getColors(1).outlined}>
                                    <div className={'w-44 h-44 relative'}>
                                        <div className={'w-full h-full absolute'}><Image alt={'breed1'}
                                                                                         src={"/images/card_generation/item_bg.svg"}
                                                                                         layout={'fill'}></Image>
                                        </div>
                                        <div className={'w-full h-full absolute'}><Image alt={'breed1'}
                                                                                         src={"/images/breeding_module/rarities/1.svg"}
                                                                                         layout={'fill'}></Image>
                                        </div>
                                    </div>
                                </div>
                            </div>


                            <div
                                className={
                                    "bg-black col-start-2 z-[999] col-span-3 h-14 mt-10 mb-10 flex justify-between items-center rounded-full pr-2 pl-4 "
                                }
                            >
                                <p className={"text-white leading-[100%] font-bold text-xl"}>{combineTitle}</p>
                                <div
                                    className={
                                        "w-20 h-12 rounded-full bg-white bg-white flex justify-center items-center"
                                    }
                                >
                                    <p className={"font-bold text-lg"}>
                                        {getCost(choosenRarityInt)} </p>
                                    <div className={"w-6 h-6 relative"}>
                                        <Image
                                            alt=""
                                            src={"/images/carrot_icon.svg"}
                                            layout={"fill"}
                                        ></Image>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                </Layout>
            </main>
        </div>
    )
}

export default Breeding
